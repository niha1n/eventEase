generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // For migrations
}

enum Role {
  ADMIN
  STAFF
  EVENT_OWNER
}

enum RSVPStatus {
    CONFIRMED
    PENDING
    DECLINED
}

model User {
  id            String    @id
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  role          Role      @default(EVENT_OWNER)
  createdAt     DateTime
  updatedAt     DateTime
  Session       Session[]
  Account       Account[]
  events        Event[]
  auditLogs     AuditLog[] @relation("UserAuditLogs")
  targetAuditLogs AuditLog[] @relation("TargetUserAuditLogs")

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  location    String?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  isPublished Boolean   @default(false)
  customFields Json?    // For storing dynamic/customizable fields
  rsvps       RSVP[]
  views       EventView[]

  @@index([userId])
}

model RSVP {
  id        String     @id @default(cuid())
  name      String
  email     String
  phone     String?
  status    RSVPStatus @default(PENDING)
  responses Json?      // For storing responses to custom fields
  eventId   String
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([eventId])
  @@index([status])
}

model AuditLog {
    id          String   @id @default(cuid())
    action      String   // e.g., "UPDATE_ROLE", "CREATE_EVENT", "DELETE_EVENT"
    userId      String   // ID of the user performing the action
    targetUserId String? // ID of the user being affected (if applicable)
    details     Json     // Additional details about the action
    createdAt   DateTime @default(now())

    // Relations
    user        User     @relation("UserAuditLogs", fields: [userId], references: [id])
    targetUser  User?    @relation("TargetUserAuditLogs", fields: [targetUserId], references: [id])

    @@index([userId])
    @@index([targetUserId])
    @@index([action])
    @@index([createdAt])
}

model EventView {
    id        String   @id @default(cuid())
    eventId   String
    createdAt DateTime @default(now())
    source    String   @default("direct") // Can be "direct", "social", "email", etc.
    event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

    @@index([eventId])
    @@index([createdAt])
}