generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")  // For migrations
}

enum Role {
  ADMIN
  STAFF
  EVENT_OWNER
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  password       String?   // Required for credentials auth
  role           Role      @default(EVENT_OWNER)
  emailVerified  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  sessions       Session[]
  accounts       Account[]
  events         Event[]
  rsvps          RSVP[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  id_token          String?
  scope             String?
  token_type        String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Extend these as needed
model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  ownerId     String

  owner User @relation(fields: [ownerId], references: [id])
  rsvps RSVP[]
}

model RSVP {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}